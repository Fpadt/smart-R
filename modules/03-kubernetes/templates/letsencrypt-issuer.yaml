# ==============================================================================
# Let's Encrypt Certificate Issuer Configuration
# This is an alternative to Traefik's built-in ACME support
# Use this if you prefer cert-manager for certificate management
# ==============================================================================

---
# Let's Encrypt Staging Issuer
# Use for testing to avoid rate limits
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    # Staging server for testing
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    
    # Email for Let's Encrypt notifications
    email: ${LETSENCRYPT_EMAIL}
    
    # Private key secret for ACME account
    privateKeySecretRef:
      name: letsencrypt-staging-private-key
    
    # DNS-01 challenge using Cloudflare
    solvers:
    - dns01:
        cloudflare:
          email: ${CLOUDFLARE_EMAIL}
          apiTokenSecretRef:
            name: cloudflare-api-token-secret
            key: api-token
      selector:
        dnsZones:
        - ${DOMAIN_PRIMARY}
        - ${DOMAIN_SECONDARY}

---
# Let's Encrypt Production Issuer
# Use for production certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    # Production server
    server: https://acme-v02.api.letsencrypt.org/directory
    
    # Email for Let's Encrypt notifications
    email: ${LETSENCRYPT_EMAIL}
    
    # Private key secret for ACME account
    privateKeySecretRef:
      name: letsencrypt-production-private-key
    
    # DNS-01 challenge using Cloudflare
    solvers:
    - dns01:
        cloudflare:
          email: ${CLOUDFLARE_EMAIL}
          apiTokenSecretRef:
            name: cloudflare-api-token-secret
            key: api-token
      selector:
        dnsZones:
        - ${DOMAIN_PRIMARY}
        - ${DOMAIN_SECONDARY}

---
# Cloudflare API Token Secret
# Required for DNS-01 challenge
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-token-secret
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: secret
type: Opaque
stringData:
  api-token: ${CF_DNS_API_TOKEN}

---
# Alternative HTTP-01 Issuer (if DNS challenge is not preferred)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-http
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ${LETSENCRYPT_EMAIL}
    privateKeySecretRef:
      name: letsencrypt-http-private-key
    
    # HTTP-01 challenge
    solvers:
    - http01:
        ingress:
          class: ${INGRESS_CLASS}
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux

---
# Certificate Template for automatic certificate generation
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ${DOMAIN_PRIMARY/./-}-tls
  namespace: ${TRAEFIK_NAMESPACE}
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: certificate
spec:
  secretName: ${DOMAIN_PRIMARY/./-}-tls
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
  dnsNames:
  - ${DOMAIN_PRIMARY}
  - "*.${DOMAIN_PRIMARY}"

---
# Secondary domain certificate (if configured)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ${DOMAIN_SECONDARY/./-}-tls
  namespace: ${TRAEFIK_NAMESPACE}
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: certificate
spec:
  secretName: ${DOMAIN_SECONDARY/./-}-tls
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
  dnsNames:
  - ${DOMAIN_SECONDARY}
  - "*.${DOMAIN_SECONDARY}"

---
# ClusterRole for cert-manager to manage certificates
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-traefik
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding for cert-manager
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-traefik
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-traefik
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: cert-manager